name: mdp_prod

services:
  db:
    image: postgres:16
    container_name: mdp_db_prod
    env_file: [ .env.prod, .env.prod.local ]
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks: [appnet]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U \"$POSTGRES_USER\" -d \"$POSTGRES_DB\" -h localhost -p 5432"]
      interval: 5s
      timeout: 5s
      retries: 20

  backend:
    build: { context: ./backend, dockerfile: Dockerfile }
    container_name: mdp_backend_prod
    env_file: [ .env.prod, .env.prod.local ]
    environment:
      DB_HOST: db
      DB_PORT: 5432
    depends_on:
      db:
        condition: service_healthy
    networks: [appnet, edge]
    labels:
      - traefik.enable=true
      - traefik.docker.network=edge
      - traefik.http.routers.mdp_api.rule=Host(`mdp-api.mon-site.ca`)
      - traefik.http.routers.mdp_api.entrypoints=web
      - traefik.http.services.mdp_api.loadbalancer.server.port=8000
    command: >
      bash -lc "
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        gunicorn gestionnaire_mdp.wsgi:application -b 0.0.0.0:8000 --workers 3
      "
    expose: ["8000"]

  frontend:
    build: { context: ./frontend }
    container_name: mdp_frontend_prod
    depends_on: [backend]
    networks: [edge]
    labels:
      - traefik.enable=true
      - traefik.docker.network=edge
      - traefik.http.routers.mdp_front.rule=Host(`mdp.mon-site.ca`)
      - traefik.http.routers.mdp_front.entrypoints=web
      - traefik.http.services.mdp_front.loadbalancer.server.port=80
    expose: ["80"]

networks:
  appnet: {}
  edge:
    external: true

volumes:
  pgdata: {}
