services:
  db:
    image: postgres:16-alpine
    container_name: mdp_db_prod
    restart: unless-stopped
    env_file:
      - .env.prod
      - .env.prod.local
    volumes:
      - mdp_prod_pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} -h localhost -p 5432"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - appnet

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: mdp_backend_prod
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    env_file:
      - .env.prod
      - .env.prod.local
    environment:
      DJANGO_DEBUG: "0"
      ALLOWED_HOSTS: "mdp-api.mon-site.ca,mdp.mon-site.ca"
      CSRF_TRUSTED_ORIGINS: "http://mdp-api.mon-site.ca,http://mdp.mon-site.ca,https://mdp-api.mon-site.ca,https://mdp.mon-site.ca"
    expose:
      - "8000"
    labels:
      traefik.enable: "true"
      traefik.docker.network: "edge"

      # Middleware redirection HTTP -> HTTPS
      traefik.http.middlewares.redirect-to-https.redirectscheme.scheme: "https"

      # ===== Domaine API direct (mdp-api.mon-site.ca) =====
      # HTTP -> redirige
      traefik.http.routers.mdp_api_http.rule: "Host(`mdp-api.mon-site.ca`)"
      traefik.http.routers.mdp_api_http.entrypoints: "web"
      traefik.http.routers.mdp_api_http.middlewares: "redirect-to-https"
      traefik.http.routers.mdp_api_http.service: "mdp_api"

      # HTTPS -> sert l'API/Admin
      traefik.http.routers.mdp_api.rule: "Host(`mdp-api.mon-site.ca`)"
      traefik.http.routers.mdp_api.entrypoints: "websecure"
      traefik.http.routers.mdp_api.tls: "true"
      traefik.http.routers.mdp_api.tls.certresolver: "le"
      traefik.http.routers.mdp_api.service: "mdp_api"

      # Service backend (port interne)
      traefik.http.services.mdp_api.loadbalancer.server.port: "8000"

      # ===== Pass-through API sous le domaine front (mdp.mon-site.ca) =====
      # HTTP -> redirige
      traefik.http.routers.mdp_api_on_front_http.rule: "Host(`mdp.mon-site.ca`) && PathPrefix(`/api/`)"
      traefik.http.routers.mdp_api_on_front_http.entrypoints: "web"
      traefik.http.routers.mdp_api_on_front_http.middlewares: "redirect-to-https"
      traefik.http.routers.mdp_api_on_front_http.priority: "1000"
      traefik.http.routers.mdp_api_on_front_http.service: "mdp_api"

      # HTTPS -> sert l'API sous /api/*
      traefik.http.routers.mdp_api_on_front.rule: "Host(`mdp.mon-site.ca`) && PathPrefix(`/api/`)"
      traefik.http.routers.mdp_api_on_front.entrypoints: "websecure"
      traefik.http.routers.mdp_api_on_front.tls: "true"
      traefik.http.routers.mdp_api_on_front.tls.certresolver: "le"
      traefik.http.routers.mdp_api_on_front.priority: "1000"
      traefik.http.routers.mdp_api_on_front.service: "mdp_api"

    networks:
      - appnet
      - edge

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: mdp_frontend_prod
    depends_on:
      - backend
    restart: unless-stopped
    expose:
      - "80"
    labels:
      traefik.enable: "true"
      traefik.docker.network: "edge"

      # HTTP -> redirige (mais NE capture PAS /api/*)
      traefik.http.routers.mdp_front_http.rule: "Host(`mdp.mon-site.ca`) && !PathPrefix(`/api/`)"
      traefik.http.routers.mdp_front_http.entrypoints: "web"
      traefik.http.routers.mdp_front_http.middlewares: "redirect-to-https"
      traefik.http.routers.mdp_front_http.priority: "1"

      # HTTPS -> sert le front (mais NE capture PAS /api/*)
      traefik.http.routers.mdp_front.rule: "Host(`mdp.mon-site.ca`) && !PathPrefix(`/api/`)"
      traefik.http.routers.mdp_front.entrypoints: "websecure"
      traefik.http.routers.mdp_front.tls: "true"
      traefik.http.routers.mdp_front.tls.certresolver: "le"
      traefik.http.routers.mdp_front.priority: "1"

      # Service front (port interne)
      traefik.http.services.mdp_front.loadbalancer.server.port: "80"
    networks:
      - edge

volumes:
  mdp_prod_pgdata:
    external: true

networks:
  appnet:
    driver: bridge
  edge:
    external: true
