services:
  db:
    image: postgres:16-alpine
    container_name: mdp_db_prod
    restart: unless-stopped
    env_file:
      - .env.prod
      - .env.prod.local
    volumes:
      - mdp_prod_pgdata:/var/lib/postgresql/data
    ports:
      - "${PROD_DB_BIND:-127.0.0.1}:${PROD_DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} -h localhost -p 5432"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - appnet

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: mdp_backend_prod
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    env_file:
      - .env.prod
      - .env.prod.local
    environment:
      DJANGO_DEBUG: "0"
    expose:
      - "8000"
    ports:
      - "${PROD_API_BIND:-127.0.0.1}:${PROD_API_PORT:-8000}:8000"
    labels:
      traefik.enable: "true"
      traefik.docker.network: "edge"

      # Middleware HTTP -> HTTPS
      traefik.http.middlewares.mdp-redirect-https.redirectscheme.scheme: "https"

      # API sous /api/ (HTTP -> redirect, HTTPS -> backend)
      traefik.http.routers.mdp-api-http.rule: "Host(`${APP_HOST}`) && PathPrefix(`/api/`)"
      traefik.http.routers.mdp-api-http.entrypoints: "web"
      traefik.http.routers.mdp-api-http.middlewares: "mdp-redirect-https"
      traefik.http.routers.mdp-api-http.priority: "1000"
      traefik.http.routers.mdp-api-http.service: "mdp-api"

      traefik.http.routers.mdp-api.rule: "Host(`${APP_HOST}`) && PathPrefix(`/api/`)"
      traefik.http.routers.mdp-api.entrypoints: "websecure"
      traefik.http.routers.mdp-api.tls: "true"
      traefik.http.routers.mdp-api.tls.certresolver: "le"
      traefik.http.routers.mdp-api.priority: "1000"
      traefik.http.routers.mdp-api.service: "mdp-api"

      # Admin Django (/admin/)
      traefik.http.routers.mdp-admin-http.rule: "Host(`${APP_HOST}`) && PathPrefix(`/admin/`)"
      traefik.http.routers.mdp-admin-http.entrypoints: "web"
      traefik.http.routers.mdp-admin-http.middlewares: "mdp-redirect-https"
      traefik.http.routers.mdp-admin-http.priority: "900"
      traefik.http.routers.mdp-admin-http.service: "mdp-api"

      traefik.http.routers.mdp-admin.rule: "Host(`${APP_HOST}`) && PathPrefix(`/admin/`)"
      traefik.http.routers.mdp-admin.entrypoints: "websecure"
      traefik.http.routers.mdp-admin.tls: "true"
      traefik.http.routers.mdp-admin.tls.certresolver: "le"
      traefik.http.routers.mdp-admin.priority: "900"
      traefik.http.routers.mdp-admin.service: "mdp-api"

      # Service backend (port interne)
      traefik.http.services.mdp-api.loadbalancer.server.port: "8000"

    networks:
      - appnet
      - edge

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: mdp_frontend_prod
    depends_on:
      - backend
    restart: unless-stopped
    expose:
      - "80"
    ports:
      - "${PROD_FRONT_BIND:-127.0.0.1}:${PROD_FRONT_PORT:-8080}:80"
    labels:
      traefik.enable: "true"
      traefik.docker.network: "edge"

      # HTTP -> redirige (mais NE capture PAS /api/*)
      traefik.http.routers.mdp-front-http.rule: "Host(`${APP_HOST}`) && !PathPrefix(`/api/`) && !PathPrefix(`/admin/`)"
      traefik.http.routers.mdp-front-http.entrypoints: "web"
      traefik.http.routers.mdp-front-http.middlewares: "mdp-redirect-https@docker"
      traefik.http.routers.mdp-front-http.priority: "1"

      # HTTPS -> sert le front (mais NE capture PAS /api/*)
      traefik.http.routers.mdp-front.rule: "Host(`${APP_HOST}`) && !PathPrefix(`/api/`) && !PathPrefix(`/admin/`)"
      traefik.http.routers.mdp-front.entrypoints: "websecure"
      traefik.http.routers.mdp-front.tls: "true"
      traefik.http.routers.mdp-front.tls.certresolver: "le"
      traefik.http.routers.mdp-front.priority: "1"

      # Service front (port interne)
      traefik.http.services.mdp-front.loadbalancer.server.port: "80"
    networks:
      - edge

volumes:
  mdp_prod_pgdata:
    external: true

networks:
  appnet:
    driver: bridge
  edge:
    external: true
